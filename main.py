import os
import logging
import pandas as pd
import numpy as np
import gradio as gr
import sys
import io
import traceback
from pathlib import Path
import time
from dotenv import load_dotenv

# ƒê·∫£m b·∫£o load file .env t·ª´ th∆∞ m·ª•c g·ªëc c·ªßa d·ª± √°n
load_dotenv(dotenv_path=Path(__file__).parent / '.env')

# Ki·ªÉm tra v√† c·∫•u h√¨nh truy c·∫≠p API
if not os.getenv('SPOTIFY_CLIENT_ID') or not os.getenv('SPOTIFY_CLIENT_SECRET'):
    print("WARNING: Spotify API credentials not found in .env file.")
    print("Please create a .env file with SPOTIFY_CLIENT_ID and SPOTIFY_CLIENT_SECRET.")

from config.config import (
    SPOTIFY_CLIENT_ID, SPOTIFY_CLIENT_SECRET, RAW_DATA_DIR,
    PROCESSED_DATA_DIR, MODELS_DIR
)
from utils.data_fetcher import SpotifyDataFetcher, fetch_initial_dataset
from utils.data_processor import DataProcessor
from models.content_model import ContentBasedRecommender
from models.transition_model import TransitionModel
from models.hybrid_model import HybridRecommender

# C·∫•u h√¨nh logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Bi·∫øn to√†n c·ª•c cho m√¥ h√¨nh
model = None

def check_spotify_credentials():
    """Ki·ªÉm tra th√¥ng tin ƒëƒÉng nh·∫≠p Spotify API t·ª´ .env"""
    client_id = os.getenv('SPOTIFY_CLIENT_ID')
    client_secret = os.getenv('SPOTIFY_CLIENT_SECRET')
    
    if not client_id or not client_secret:
        logger.warning("Kh√¥ng t√¨m th·∫•y th√¥ng tin Spotify API trong file .env")
        return False
    
    logger.info("T√¨m th·∫•y th√¥ng tin Spotify API")
    return True

def test_spotify_connection():
    """Ki·ªÉm tra k·∫øt n·ªëi v·ªõi Spotify API"""
    try:
        from utils.data_fetcher import SpotifyDataFetcher
        
        # T·∫°o instance m·ªõi c·ªßa SpotifyDataFetcher
        fetcher = SpotifyDataFetcher()
        
        # Th·ª≠ t√¨m ki·∫øm m·ªôt b√†i h√°t ƒë·ªÉ ki·ªÉm tra k·∫øt n·ªëi
        results = fetcher.sp.search(q="test", limit=1)
        
        if results and 'tracks' in results and 'items' in results['tracks']:
            track_name = results['tracks']['items'][0]['name'] if results['tracks']['items'] else "Unknown"
            return f"‚úÖ K·∫øt n·ªëi Spotify API th√†nh c√¥ng! T√¨m th·∫•y b√†i h√°t: {track_name}"
        else:
            return "‚ùå L·ªói: K·∫øt n·ªëi th√†nh c√¥ng nh∆∞ng ƒë·ªãnh d·∫°ng ph·∫£n h·ªìi kh√¥ng ƒë√∫ng"
    except Exception as e:
        return f"‚ùå L·ªói k·∫øt n·ªëi: {str(e)}"

def load_model():
    """N·∫°p m√¥ h√¨nh n·∫øu ƒë√£ t·ªìn t·∫°i"""
    global model
    
    model_path = os.path.join(MODELS_DIR, 'hybrid_recommender.pkl')
    
    if os.path.exists(model_path):
        try:
            model = HybridRecommender()
            model.load(model_path)
            
            # N·∫°p tracks_df n·∫øu c·∫ßn
            tracks_path = os.path.join(PROCESSED_DATA_DIR, 'track_features.csv')
            if os.path.exists(tracks_path):
                model.tracks_df = pd.read_csv(tracks_path)
            
            return "‚úÖ ƒê√£ n·∫°p m√¥ h√¨nh th√†nh c√¥ng!"
        except Exception as e:
            return f"‚ö†Ô∏è L·ªói khi n·∫°p m√¥ h√¨nh: {str(e)}"
    
    return "‚ö†Ô∏è Ch∆∞a t√¨m th·∫•y m√¥ h√¨nh. Vui l√≤ng thi·∫øt l·∫≠p h·ªá th·ªëng tr∆∞·ªõc."

def get_song_recommendations(song_name, artist_name="", num_recommendations=10):
    """T√¨m ƒë·ªÅ xu·∫•t b√†i h√°t t∆∞∆°ng t·ª±"""
    global model
    
    # Ki·ªÉm tra m√¥ h√¨nh ƒë√£ n·∫°p ch∆∞a
    if model is None:
        result = load_model()
        if "‚ö†Ô∏è" in result:
            return None, result
    
    # Ki·ªÉm tra input
    if not song_name:
        return None, "‚ö†Ô∏è Vui l√≤ng nh·∫≠p t√™n b√†i h√°t."
    
    try:
        # T√¨m ƒë·ªÅ xu·∫•t
        recommendations = model.recommend(
            track_name=song_name,
            artist=artist_name,
            n_recommendations=num_recommendations
        )
        
        # Format k·∫øt qu·∫£
        output_text = f"### ƒê·ªÅ xu·∫•t cho: '{song_name}'{' - ' + artist_name if artist_name else ''}\n\n"
        
        if recommendations is not None and not recommendations.empty:
            # Hi·ªÉn th·ªã t·ª´ng ƒë·ªÅ xu·∫•t
            for i, (_, row) in enumerate(recommendations.iterrows(), 1):
                # Format ƒëi·ªÉm s·ªë
                score = round(row.get('weighted_score', 0) * 100, 2)
                
                # T·∫°o th√¥ng tin b√†i h√°t
                track_info = f"**{row['name']}** - {row['artist']} (ƒê·ªô t∆∞∆°ng t·ª±: {score}%)"
                    
                output_text += f"{i}. {track_info}\n"
        else:
            output_text += "Kh√¥ng t√¨m th·∫•y ƒë·ªÅ xu·∫•t n√†o üò¢"
        
        return recommendations, output_text
    
    except Exception as e:
        logger.error(f"L·ªói t√¨m ƒë·ªÅ xu·∫•t: {str(e)}")
        return None, f"‚ö†Ô∏è L·ªói: {str(e)}"

def optimize_music_queue(queue_text):
    """T·ªëi ∆∞u h√≥a h√†ng ƒë·ª£i ph√°t nh·∫°c"""
    global model
    
    # Ki·ªÉm tra m√¥ h√¨nh ƒë√£ n·∫°p ch∆∞a
    if model is None:
        result = load_model()
        if "‚ö†Ô∏è" in result:
            return result
    
    # Ph√¢n t√≠ch danh s√°ch b√†i h√°t
    if not queue_text:
        return "‚ö†Ô∏è Vui l√≤ng nh·∫≠p danh s√°ch b√†i h√°t, c√°ch nhau b·ªüi d·∫•u ph·∫©y."
    
    tracks = [track.strip() for track in queue_text.split(',')]
    tracks = [track for track in tracks if track]
    
    parsed_tracks = []
    for track in tracks:
        parts = track.split('-', 1)
        if len(parts) > 1:
            track_name = parts[0].strip()
            artist_name = parts[1].strip()
            parsed_tracks.append((track_name, artist_name))
        else:
            track_name = parts[0].strip()
            parsed_tracks.append((track_name, None))
    
    # T√¨m ID c·ªßa c√°c b√†i h√°t
    track_ids = []
    not_found = []
    
    for track_name, artist_name in parsed_tracks:
        track_idx = model.content_recommender._find_track_index(track_name=track_name, artist=artist_name)
        if track_idx is not None:
            track_id = model.tracks_df.iloc[track_idx]['id']
            track_ids.append(track_id)
        else:
            not_found.append(f"{track_name}{' - ' + artist_name if artist_name else ''}")
    
    if not track_ids:
        return "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y b√†i h√°t n√†o. Vui l√≤ng ki·ªÉm tra l·∫°i t√™n b√†i h√°t."
    
    # T·ªëi ∆∞u h√≥a h√†ng ƒë·ª£i
    try:
        optimized_queue = model.optimize_queue(track_ids)
        analysis = model.analyze_queue(optimized_queue)
        
        # Format k·∫øt qu·∫£
        output_text = f"### H√†ng ƒë·ª£i ƒë√£ t·ªëi ∆∞u ({len(optimized_queue)} b√†i h√°t)\n\n"
        
        if not_found:
            output_text += f"**L∆∞u √Ω**: Kh√¥ng t√¨m th·∫•y {len(not_found)} b√†i h√°t: {', '.join(not_found)}\n\n"
        
        tracks_df = model.tracks_df
        for i, track_id in enumerate(optimized_queue, 1):
            track = tracks_df[tracks_df['id'] == track_id]
            if not track.empty:
                output_text += f"{i}. **{track.iloc[0]['name']}** - {track.iloc[0]['artist']}\n"
        
        if analysis is not None and not analysis.empty:
            output_text += "\n### Ph√¢n t√≠ch ch·∫•t l∆∞·ª£ng chuy·ªÉn ti·∫øp\n\n"
            quality_emoji = {
                "Excellent": "üü¢ Tuy·ªát v·ªùi",
                "Good": "üü° T·ªët",
                "Average": "üü† Trung b√¨nh",
                "Poor": "üî¥ Kh√¥ng t·ªët"
            }
            
            for i, row in analysis.iterrows():
                from_parts = row['from_track'].split(' - ', 1)
                to_parts = row['to_track'].split(' - ', 1)
                from_name = from_parts[0]
                to_name = to_parts[0]
                output_text += f"{i+1}. **{from_name}** ‚Üí **{to_name}**: {quality_emoji.get(row['quality'], row['quality'])} ({row['transition_score']:.2f})\n"
        
        return output_text
        
    except Exception as e:
        logger.error(f"L·ªói t·ªëi ∆∞u h√†ng ƒë·ª£i: {str(e)}")
        return f"‚ö†Ô∏è L·ªói: {str(e)}"

def generate_queue(seed_track, seed_artist="", queue_length=10):
    """T·∫°o danh s√°ch ph√°t t·ª´ b√†i h√°t ƒë·∫ßu v√†o"""
    global model
    try:
        # ƒê·∫£m b·∫£o m√¥ h√¨nh ƒë√£ ƒë∆∞·ª£c n·∫°p
        if model is None:
            result = load_model()
            if "‚ö†Ô∏è" in result:
                return result

        # T·∫°o queue
        queue, analysis = model.generate_playlist_from_seed(
            seed_track=seed_track,
            seed_artist=seed_artist,
            n_recommendations=int(queue_length)
        )
        
        if queue is None or queue.empty:
            return "Kh√¥ng th·ªÉ t·∫°o ƒë·ªÅ xu·∫•t. Vui l√≤ng th·ª≠ v·ªõi b√†i h√°t kh√°c."
        
        # T·∫°o k·∫øt qu·∫£ d∆∞·ªõi d·∫°ng markdown
        output_text = f"## ƒê·ªÅ xu·∫•t t·ª´ '{seed_track}'\n\n"
        
        # Emoji cho ch·∫•t l∆∞·ª£ng chuy·ªÉn ƒë·ªïi
        quality_emoji = {
            "Excellent": "üåü",
            "Good": "üëç",
            "Fair": "üëå",
            "Poor": "üëé"
        }
        
        # T·∫°o danh s√°ch b√†i h√°t
        output_text += "### Danh s√°ch b√†i h√°t:\n"
        for i, track in enumerate(queue['name']):
            artist = queue['artist'].iloc[i]
            output_text += f"{i+1}. **{track}** - *{artist}*\n"
        
        # N·∫øu c√≥ ph√¢n t√≠ch chuy·ªÉn ƒë·ªïi
        if analysis is not None and not analysis.empty:
            output_text += "\n### Ph√¢n t√≠ch chuy·ªÉn ƒë·ªïi:\n"
            for i, row in analysis.iterrows():
                from_parts = row['from_track'].split(' - ', 1)
                to_parts = row['to_track'].split(' - ', 1)
                from_name = from_parts[0]
                to_name = to_parts[0]
                output_text += f"{i+1}. **{from_name}** ‚Üí **{to_name}**: {quality_emoji.get(row['quality'], row['quality'])} ({row['transition_score']:.2f})\n"
        
        return output_text
    except Exception as e:
        error_trace = traceback.format_exc()
        logger.error(f"L·ªói khi t·∫°o queue: {str(e)}\n{error_trace}")
        return f"L·ªói khi t·∫°o ƒë·ªÅ xu·∫•t: {str(e)}"
    
def setup_initial_dataset(progress=gr.Progress(), tracks_per_query=20):
    """Thi·∫øt l·∫≠p b·ªô d·ªØ li·ªáu ban ƒë·∫ßu v·ªõi progress bar"""
    # Ki·ªÉm tra th√¥ng tin ƒëƒÉng nh·∫≠p
    if not check_spotify_credentials():
        return "‚ö†Ô∏è Thi·∫øu th√¥ng tin x√°c th·ª±c Spotify. Vui l√≤ng thi·∫øt l·∫≠p file .env."
    
    # T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a t·ªìn t·∫°i
    os.makedirs(RAW_DATA_DIR, exist_ok=True)
    
    progress(0.1, desc="Ki·ªÉm tra d·ªØ li·ªáu hi·ªán c√≥...")
    
    try:
        # Kh·ªüi t·∫°o fetcher
        fetcher = SpotifyDataFetcher()
        
        # T·∫£i b√†i h√°t
        progress(0.3, desc=f"T·∫£i danh s√°ch b√†i h√°t (t·ªëi ƒëa {tracks_per_query} b√†i/query)...")
        tracks_df = fetch_initial_dataset(tracks_per_query=tracks_per_query)
        
        if tracks_df is None or tracks_df.empty:
            return "‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫£i b√†i h√°t t·ª´ Spotify API."
            
        # L∆∞u danh s√°ch b√†i h√°t
        tracks_path = os.path.join(RAW_DATA_DIR, 'spotify_tracks.csv')
        tracks_df.to_csv(tracks_path, index=False)
        
        progress(0.5, desc="T·∫£i ƒë·∫∑c tr∆∞ng √¢m thanh...")
        
        # T·∫£i ƒë·∫∑c tr∆∞ng √¢m thanh (gi·ªõi h·∫°n ƒë·ªÉ tr√°nh l·ªói API)
        audio_features_path = os.path.join(RAW_DATA_DIR, 'audio_features.csv')
        max_tracks = min(200, len(tracks_df))  # Gi·∫£m s·ªë l∆∞·ª£ng tracks t·ªëi ƒëa
        track_ids = tracks_df['id'].head(max_tracks).tolist()
        
        # T·∫£i t·ª´ng batch nh·ªè h∆°n
        batch_size = 20  # Gi·∫£m k√≠ch th∆∞·ªõc batch t·ª´ 50 xu·ªëng 20
        all_features = []
        
        for i in range(0, len(track_ids), batch_size):
            batch = track_ids[i:i+batch_size]
            progress_value = 0.5 + (i / len(track_ids)) * 0.3
            batch_desc = f"T·∫£i ƒë·∫∑c tr∆∞ng √¢m thanh batch {i//batch_size + 1}/{len(track_ids)//batch_size + 1}..."
            progress(progress_value, desc=batch_desc)
            
            try:
                batch_features = fetcher.fetch_audio_features(batch)
                if not batch_features.empty:
                    all_features.append(batch_features)
            except Exception as e:
                logger.warning(f"L·ªói khi t·∫£i batch {i//batch_size + 1}: {str(e)}")
                # Ti·∫øp t·ª•c v·ªõi batch ti·∫øp theo
            
            # T·∫°m d·ª´ng ƒë·ªÉ tr√°nh rate limit - tƒÉng th·ªùi gian ch·ªù
            time.sleep(2)  # TƒÉng t·ª´ 1s l√™n 2s
        
        # K·∫øt h·ª£p v√† l∆∞u
        if all_features:
            features_df = pd.concat(all_features)
            features_df.to_csv(audio_features_path, index=False)
            
            progress(0.8, desc=f"ƒê√£ t·∫£i ƒë·∫∑c tr∆∞ng cho {len(features_df)} b√†i h√°t")
        else:
            progress(0.8, desc="Kh√¥ng th·ªÉ t·∫£i ƒë·∫∑c tr∆∞ng √¢m thanh")
            logger.warning("Kh√¥ng th·ªÉ t·∫£i ƒë·∫∑c tr∆∞ng √¢m thanh")
        
        # T·∫£i th√¥ng tin th·ªÉ lo·∫°i ngh·ªá sƒ© v·ªõi batch size nh·ªè h∆°n
        genres_path = os.path.join(RAW_DATA_DIR, 'artist_genres.csv')
        
        if 'artist_id' in tracks_df.columns:
            artist_ids = tracks_df['artist_id'].dropna().unique().tolist()
            max_artists = min(50, len(artist_ids))  # Gi·∫£m t·ª´ 100 xu·ªëng 50
            artist_ids = artist_ids[:max_artists]
            
            # T·∫£i th√¥ng tin ngh·ªá sƒ© theo batch
            try:
                progress(0.9, desc="T·∫£i th√¥ng tin th·ªÉ lo·∫°i...")
                fetcher.fetch_artist_genres(artist_ids, save_path=genres_path, batch_size=20)  # Th√™m batch_size=20
            except Exception as e:
                logger.warning(f"L·ªói khi t·∫£i th√¥ng tin th·ªÉ lo·∫°i: {str(e)}")
        
        progress(1.0, desc="Ho√†n t·∫•t thi·∫øt l·∫≠p d·ªØ li·ªáu ban ƒë·∫ßu!")
        return f"‚úÖ D·ªØ li·ªáu ban ƒë·∫ßu ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p! ƒê√£ t·∫£i {len(tracks_df)} b√†i h√°t."
        
    except Exception as e:
        logger.error(f"L·ªói thi·∫øt l·∫≠p d·ªØ li·ªáu ban ƒë·∫ßu: {traceback.format_exc()}")
        return f"‚ö†Ô∏è L·ªói: {str(e)}"
    
def process_data(progress=gr.Progress()):
    """X·ª≠ l√Ω d·ªØ li·ªáu th√¥ th√†nh ƒë·∫∑c tr∆∞ng cho m√¥ h√¨nh"""
    # Ki·ªÉm tra d·ªØ li·ªáu th√¥
    tracks_path = os.path.join(RAW_DATA_DIR, 'spotify_tracks.csv')
    audio_path = os.path.join(RAW_DATA_DIR, 'audio_features.csv')
    
    if not os.path.exists(tracks_path) or not os.path.exists(audio_path):
        return "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu th√¥. Vui l√≤ng thi·∫øt l·∫≠p d·ªØ li·ªáu ban ƒë·∫ßu tr∆∞·ªõc."
    
    progress(0.1, desc="Kh·ªüi t·∫°o b·ªô x·ª≠ l√Ω d·ªØ li·ªáu...")
    
    try:
        # T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a t·ªìn t·∫°i
        os.makedirs(PROCESSED_DATA_DIR, exist_ok=True)
        
        # Kh·ªüi t·∫°o processor
        processor = DataProcessor()
        
        # N·∫°p d·ªØ li·ªáu
        progress(0.2, desc="ƒê·ªçc d·ªØ li·ªáu th√¥...")
        processor.load_data()
        
        # X·ª≠ l√Ω d·ªØ li·ªáu
        progress(0.4, desc="L√†m s·∫°ch d·ªØ li·ªáu...")
        processor.clean_tracks_data()
        
        progress(0.5, desc="K·∫øt h·ª£p ƒë·∫∑c tr∆∞ng √¢m thanh...")
        processor.merge_audio_features()
        
        progress(0.6, desc="K·∫øt h·ª£p th√¥ng tin th·ªÉ lo·∫°i...")
        processor.merge_artist_genres()
        
        progress(0.7, desc="Tr√≠ch xu·∫•t nƒÉm ph√°t h√†nh...")
        processor.extract_release_year()
        
        progress(0.8, desc="T·∫°o ƒë·∫∑c tr∆∞ng th·ªÉ lo·∫°i...")
        processor.create_genre_features()
        
        progress(0.9, desc="Chu·∫©n h√≥a ƒë·∫∑c tr∆∞ng...")
        processor.normalize_features()
        
        # L∆∞u d·ªØ li·ªáu ƒë√£ x·ª≠ l√Ω
        track_features_path = os.path.join(PROCESSED_DATA_DIR, 'track_features.csv')
        processor.tracks_df.to_csv(track_features_path, index=False)
        
        # T·∫°o ma tr·∫≠n user-item (t√πy ch·ªçn)
        progress(0.95, desc="T·∫°o ma tr·∫≠n user-item...")
        user_matrix_path = os.path.join(PROCESSED_DATA_DIR, 'user_item_matrix.csv')
        processor.create_user_item_matrix(output_path=user_matrix_path)
        
        progress(1.0, desc="Ho√†n t·∫•t x·ª≠ l√Ω d·ªØ li·ªáu!")
        return f"‚úÖ X·ª≠ l√Ω d·ªØ li·ªáu ho√†n t·∫•t! ƒê√£ x·ª≠ l√Ω {len(processor.tracks_df)} b√†i h√°t."
        
    except Exception as e:
        logger.error(f"L·ªói x·ª≠ l√Ω d·ªØ li·ªáu: {traceback.format_exc()}")
        return f"‚ö†Ô∏è L·ªói: {str(e)}"

def train_models(progress=gr.Progress()):
    """Hu·∫•n luy·ªán c√°c m√¥ h√¨nh ƒë·ªÅ xu·∫•t"""
    # Ki·ªÉm tra d·ªØ li·ªáu ƒë√£ x·ª≠ l√Ω
    track_features_path = os.path.join(PROCESSED_DATA_DIR, 'track_features.csv')
    
    if not os.path.exists(track_features_path):
        return "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu ƒë√£ x·ª≠ l√Ω. Vui l√≤ng x·ª≠ l√Ω d·ªØ li·ªáu tr∆∞·ªõc."
    
    progress(0.1, desc="ƒê·ªçc d·ªØ li·ªáu ƒë√£ x·ª≠ l√Ω...")
    
    try:
        # T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a t·ªìn t·∫°i
        os.makedirs(MODELS_DIR, exist_ok=True)
        
        # N·∫°p d·ªØ li·ªáu ƒë√£ x·ª≠ l√Ω
        tracks_df = pd.read_csv(track_features_path)
        
        # N·∫°p ma tr·∫≠n user-item (n·∫øu c√≥)
        user_matrix_path = os.path.join(PROCESSED_DATA_DIR, 'user_item_matrix.csv')
        user_item_matrix = None
        
        if os.path.exists(user_matrix_path):
            try:
                user_item_matrix = pd.read_csv(user_matrix_path, index_col=0)
            except:
                logger.warning("Kh√¥ng th·ªÉ ƒë·ªçc ma tr·∫≠n user-item, ti·∫øp t·ª•c m√† kh√¥ng c√≥ n√≥")
        
        # Hu·∫•n luy·ªán Content-Based Model
        progress(0.3, desc="Hu·∫•n luy·ªán m√¥ h√¨nh content-based...")
        content_model = ContentBasedRecommender()
        content_model.train(tracks_df)
        content_model.save(os.path.join(MODELS_DIR, 'content_recommender.pkl'))
        
        # Hu·∫•n luy·ªán Transition Model
        progress(0.5, desc="Hu·∫•n luy·ªán m√¥ h√¨nh transition...")
        transition_model = TransitionModel()
        transition_model.train(tracks_df)
        transition_model.save(os.path.join(MODELS_DIR, 'transition_model.pkl'))
        
        # Hu·∫•n luy·ªán Hybrid Model
        progress(0.7, desc="Hu·∫•n luy·ªán m√¥ h√¨nh hybrid...")
        hybrid_model = HybridRecommender()
        hybrid_model.train(tracks_df, user_item_matrix)
        hybrid_model.save(os.path.join(MODELS_DIR, 'hybrid_recommender.pkl'))
        
        # C·∫≠p nh·∫≠t bi·∫øn to√†n c·ª•c
        global model
        model = hybrid_model
        
        progress(1.0, desc="Ho√†n t·∫•t hu·∫•n luy·ªán m√¥ h√¨nh!")
        return "‚úÖ C√°c m√¥ h√¨nh ƒë√£ ƒë∆∞·ª£c hu·∫•n luy·ªán th√†nh c√¥ng! H·ªá th·ªëng ƒë√£ s·∫µn s√†ng s·ª≠ d·ª•ng."
        
    except Exception as e:
        logger.error(f"L·ªói hu·∫•n luy·ªán m√¥ h√¨nh: {traceback.format_exc()}")
        return f"‚ö†Ô∏è L·ªói: {str(e)}"

def setup_full_system(progress=gr.Progress()):
    """Thi·∫øt l·∫≠p to√†n b·ªô h·ªá th·ªëng trong m·ªôt b∆∞·ªõc"""
    # Ki·ªÉm tra th√¥ng tin ƒëƒÉng nh·∫≠p
    if not check_spotify_credentials():
        return "‚ö†Ô∏è Thi·∫øu th√¥ng tin x√°c th·ª±c Spotify. Vui l√≤ng thi·∫øt l·∫≠p file .env."
    
    progress(0.05, desc="B·∫Øt ƒë·∫ßu thi·∫øt l·∫≠p h·ªá th·ªëng...")
    
    try:
        # 1. Thi·∫øt l·∫≠p d·ªØ li·ªáu ban ƒë·∫ßu
        progress(0.1, desc="ƒêang thi·∫øt l·∫≠p d·ªØ li·ªáu ban ƒë·∫ßu...")
        dataset_result = setup_initial_dataset(progress, tracks_per_query=15)
        
        if "‚ö†Ô∏è" in dataset_result:
            return dataset_result
        
        # 2. X·ª≠ l√Ω d·ªØ li·ªáu
        progress(0.4, desc="ƒêang x·ª≠ l√Ω d·ªØ li·ªáu...")
        process_result = process_data(progress)
        
        if "‚ö†Ô∏è" in process_result:
            return process_result
        
        # 3. Hu·∫•n luy·ªán m√¥ h√¨nh
        progress(0.7, desc="ƒêang hu·∫•n luy·ªán m√¥ h√¨nh...")
        training_result = train_models(progress)
        
        if "‚ö†Ô∏è" in training_result:
            return training_result
        
        progress(1.0, desc="Thi·∫øt l·∫≠p to√†n b·ªô h·ªá th·ªëng ho√†n t·∫•t!")
        return "‚úÖ Thi·∫øt l·∫≠p to√†n b·ªô h·ªá th·ªëng ho√†n t·∫•t! H·ªá th·ªëng ƒë·ªÅ xu·∫•t ƒë√£ s·∫µn s√†ng s·ª≠ d·ª•ng."
        
    except Exception as e:
        logger.error(f"L·ªói thi·∫øt l·∫≠p h·ªá th·ªëng: {traceback.format_exc()}")
        return f"‚ö†Ô∏è L·ªói: {str(e)}"

def create_ui():
    """T·∫°o giao di·ªán ng∆∞·ªùi d√πng Gradio"""
    with gr.Blocks(title="H·ªá th·ªëng ƒê·ªÅ xu·∫•t √Çm nh·∫°c") as app:
        # Tab Trang ch·ªß
        with gr.Tab("Trang ch·ªß"):
            gr.Markdown("# H·ªá th·ªëng ƒê·ªÅ xu·∫•t √Çm nh·∫°c")
            gr.Markdown("Ch√†o m·ª´ng ƒë·∫øn v·ªõi h·ªá th·ªëng ƒë·ªÅ xu·∫•t √¢m nh·∫°c th√¥ng minh!")
            
            # Tr·∫°ng th√°i h·ªá th·ªëng
            gr.Markdown("## Tr·∫°ng th√°i h·ªá th·ªëng")
            
            with gr.Row():
                with gr.Column():
                    api_status = gr.Markdown("Tr·∫°ng th√°i k·∫øt n·ªëi API: Ch∆∞a ki·ªÉm tra")
                    model_status = gr.Markdown("Tr·∫°ng th√°i m√¥ h√¨nh: Ch∆∞a ki·ªÉm tra")
                
                with gr.Column():
                    check_api_button = gr.Button("Ki·ªÉm tra k·∫øt n·ªëi Spotify API")
                    check_model_button = gr.Button("Ki·ªÉm tra tr·∫°ng th√°i m√¥ h√¨nh")
            
            check_api_button.click(fn=test_spotify_connection, inputs=[], outputs=api_status)
            check_model_button.click(fn=load_model, inputs=[], outputs=model_status)
        
        # Tab Thi·∫øt l·∫≠p h·ªá th·ªëng
        with gr.Tab("Thi·∫øt l·∫≠p h·ªá th·ªëng"):
            gr.Markdown("# Thi·∫øt l·∫≠p h·ªá th·ªëng")
            gr.Markdown("Thi·∫øt l·∫≠p d·ªØ li·ªáu v√† hu·∫•n luy·ªán m√¥ h√¨nh tr∆∞·ªõc khi s·ª≠ d·ª•ng")
            
            with gr.Row():
                with gr.Column():
                    setup_data_btn = gr.Button("1. Thi·∫øt l·∫≠p d·ªØ li·ªáu ban ƒë·∫ßu")
                    process_data_btn = gr.Button("2. X·ª≠ l√Ω d·ªØ li·ªáu")
                    train_models_btn = gr.Button("3. Hu·∫•n luy·ªán m√¥ h√¨nh")
                    setup_all_btn = gr.Button("Thi·∫øt l·∫≠p to√†n b·ªô h·ªá th·ªëng (1+2+3)", variant="primary")
                    
                    tracks_per_query = gr.Slider(minimum=5, maximum=50, value=15, step=5,
                                              label="S·ªë b√†i h√°t m·ªói truy v·∫•n")
                
                with gr.Column():
                    setup_output = gr.Markdown("K·∫øt qu·∫£ s·∫Ω hi·ªÉn th·ªã ·ªü ƒë√¢y...")
            
            # K·∫øt n·ªëi c√°c n√∫t v·ªõi h√†m t∆∞∆°ng ·ª©ng
            setup_data_btn.click(fn=setup_initial_dataset, inputs=[tracks_per_query], outputs=setup_output)
            process_data_btn.click(fn=process_data, inputs=[], outputs=setup_output)
            train_models_btn.click(fn=train_models, inputs=[], outputs=setup_output)
            setup_all_btn.click(fn=setup_full_system, inputs=[], outputs=setup_output)
            
        # Tab ƒê·ªÅ xu·∫•t
        with gr.Tab("ƒê·ªÅ xu·∫•t"):
            with gr.Row():
                with gr.Column():
                    song_input = gr.Textbox(label="Nh·∫≠p t√™n b√†i h√°t")
                    artist_input = gr.Textbox(label="Nh·∫≠p t√™n ngh·ªá sƒ© (t√πy ch·ªçn)")
                    queue_length = gr.Slider(minimum=5, maximum=20, value=10, step=1, 
                                           label="S·ªë l∆∞·ª£ng b√†i h√°t ƒë·ªÅ xu·∫•t")
                    recommend_btn = gr.Button("ƒê·ªÅ xu·∫•t b√†i h√°t")
                
                with gr.Column():
                    result_output = gr.Markdown("K·∫øt qu·∫£ ƒë·ªÅ xu·∫•t s·∫Ω hi·ªÉn th·ªã ·ªü ƒë√¢y")
            
            recommend_btn.click(
                fn=generate_queue,
                inputs=[song_input, artist_input, queue_length],
                outputs=result_output
            )
        
        # Tab T·ªëi ∆∞u h√≥a h√†ng ƒë·ª£i
        with gr.Tab("T·ªëi ∆∞u h√≥a h√†ng ƒë·ª£i"):
            gr.Markdown("# T·ªëi ∆∞u h√≥a h√†ng ƒë·ª£i ph√°t nh·∫°c")
            gr.Markdown("Nh·∫≠p danh s√°ch b√†i h√°t ƒë·ªÉ t·ªëi ∆∞u th·ª© t·ª± ph√°t t·∫°o tr·∫£i nghi·ªám nghe t·ªët nh·∫•t")
            
            with gr.Row():
                with gr.Column():
                    queue_input = gr.Textbox(
                        label="Danh s√°ch b√†i h√°t (c√°ch nhau b·ªüi d·∫•u ph·∫©y)",
                        placeholder="Last Christmas - Wham, Shape of You - Ed Sheeran, Blinding Lights - The Weeknd",
                        lines=5
                    )
                    optimize_btn = gr.Button("T·ªëi ∆∞u h√≥a h√†ng ƒë·ª£i")
                
                with gr.Column():
                    optimize_output = gr.Markdown("K·∫øt qu·∫£ t·ªëi ∆∞u h√≥a s·∫Ω hi·ªÉn th·ªã ·ªü ƒë√¢y")
            
            optimize_btn.click(
                fn=optimize_music_queue,
                inputs=[queue_input],
                outputs=optimize_output
            )
            
        # Tab T√¨m ki·∫øm b√†i h√°t t∆∞∆°ng t·ª±
        with gr.Tab("T√¨m ki·∫øm t∆∞∆°ng t·ª±"):
            gr.Markdown("# T√¨m ki·∫øm b√†i h√°t t∆∞∆°ng t·ª±")
            gr.Markdown("T√¨m c√°c b√†i h√°t t∆∞∆°ng t·ª± v·ªõi b√†i h√°t b·∫°n y√™u th√≠ch")
            
            with gr.Row():
                with gr.Column():
                    similar_song_input = gr.Textbox(label="Nh·∫≠p t√™n b√†i h√°t")
                    similar_artist_input = gr.Textbox(label="Nh·∫≠p t√™n ngh·ªá sƒ© (t√πy ch·ªçn)")
                    similar_count = gr.Slider(minimum=5, maximum=20, value=10, step=1, 
                                            label="S·ªë l∆∞·ª£ng b√†i h√°t t∆∞∆°ng t·ª±")
                    similar_btn = gr.Button("T√¨m b√†i h√°t t∆∞∆°ng t·ª±")
                
                with gr.Column():
                    similar_output = gr.Markdown("K·∫øt qu·∫£ t√¨m ki·∫øm s·∫Ω hi·ªÉn th·ªã ·ªü ƒë√¢y")
            
            similar_btn.click(
                fn=lambda song, artist, count: get_song_recommendations(song, artist, count)[1],  # L·∫•y ph·∫ßn vƒÉn b·∫£n
                inputs=[similar_song_input, similar_artist_input, similar_count],
                outputs=similar_output
            )
            
    return app

if __name__ == "__main__":
    app = create_ui()
    app.launch(share=False)